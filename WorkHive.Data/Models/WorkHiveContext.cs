// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace WorkHive.Data.Models;

public partial class WorkHiveContext : DbContext
{
    public WorkHiveContext(DbContextOptions<WorkHiveContext> options)
        : base(options)
    {
    }
    public WorkHiveContext()
    {
        
    }
    public virtual DbSet<Amenity> Amenities { get; set; }

    public virtual DbSet<Beverage> Beverages { get; set; }

    public virtual DbSet<BookingAmenity> BookingAmenities { get; set; }

    public virtual DbSet<BookingBeverage> BookingBeverages { get; set; }

    public virtual DbSet<BookingWorkspace> BookingWorkspaces { get; set; }

    public virtual DbSet<CustomerWallet> CustomerWallets { get; set; }

    public virtual DbSet<Facility> Facilities { get; set; }

    public virtual DbSet<FacilityWorkspace> FacilityWorkspaces { get; set; }

    public virtual DbSet<Feedback> Feedbacks { get; set; }

    public virtual DbSet<Image> Images { get; set; }

    public virtual DbSet<ImageFeedback> ImageFeedbacks { get; set; }

    public virtual DbSet<Notification> Notifications { get; set; }

    public virtual DbSet<Owner> Owners { get; set; }

    public virtual DbSet<OwnerTransactionHistory> OwnerTransactionHistories { get; set; }

    public virtual DbSet<OwnerWallet> OwnerWallets { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<Policy> Policies { get; set; }

    public virtual DbSet<Price> Prices { get; set; }

    public virtual DbSet<Rating> Ratings { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<TransactionHistory> TransactionHistories { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserTransactionHistory> UserTransactionHistories { get; set; }

    public virtual DbSet<Wallet> Wallets { get; set; }

    public virtual DbSet<Workspace> Workspaces { get; set; }

    public virtual DbSet<WorkspaceImage> WorkspaceImages { get; set; }

    public virtual DbSet<WorkspacePolicy> WorkspacePolicies { get; set; }

    public virtual DbSet<WorkspacePrice> WorkspacePrices { get; set; }

    public virtual DbSet<WorkspaceRating> WorkspaceRatings { get; set; }

    public virtual DbSet<WorkspaceRatingImage> WorkspaceRatingImages { get; set; }

    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }
    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection"));
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Amenity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Amenity__3214EC27F21CED4F");

            entity.ToTable("Amenity");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BookingAmenityId).HasColumnName("Booking_AmenityID");
            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .HasColumnName("category");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.ImgUrl)
                .HasMaxLength(255)
                .HasColumnName("img_url");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasColumnName("name");
            entity.Property(e => e.Price)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("price");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.BookingAmenity).WithMany(p => p.Amenities)
                .HasForeignKey(d => d.BookingAmenityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKAmenity351763");
        });

        modelBuilder.Entity<Beverage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Beverage__3214EC271BBE5E93");

            entity.ToTable("Beverage");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.BookingBeverageId).HasColumnName("Booking_BeverageID");
            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .HasColumnName("category");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.ImgUrl)
                .HasMaxLength(255)
                .HasColumnName("img_url");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasColumnName("name");
            entity.Property(e => e.Price)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("price");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.BookingBeverage).WithMany(p => p.Beverages)
                .HasForeignKey(d => d.BookingBeverageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKBeverage714427");
        });

        modelBuilder.Entity<BookingAmenity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Booking___3214EC270B52465C");

            entity.ToTable("Booking_Amenity");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.BookingWorkspaceId).HasColumnName("Booking_WorkspaceID");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");

            entity.HasOne(d => d.BookingWorkspace).WithMany(p => p.BookingAmenities)
                .HasForeignKey(d => d.BookingWorkspaceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKBooking_Am543552");
        });

        modelBuilder.Entity<BookingBeverage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Booking___3214EC2703859D40");

            entity.ToTable("Booking_Beverage");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.BookingWorkspaceId).HasColumnName("Booking_WorkspaceID");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");

            entity.HasOne(d => d.BookingWorkspace).WithMany(p => p.BookingBeverages)
                .HasForeignKey(d => d.BookingWorkspaceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKBooking_Be360446");
        });

        modelBuilder.Entity<BookingWorkspace>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Booking___3214EC27D05D2505");

            entity.ToTable("Booking_Workspace");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.EndDate)
                .HasColumnType("datetime")
                .HasColumnName("end_date");
            entity.Property(e => e.PaymentId).HasColumnName("PaymentID");
            entity.Property(e => e.Price)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("price");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.WorkspaceId).HasColumnName("WorkspaceID");

            entity.HasOne(d => d.Payment).WithMany(p => p.BookingWorkspaces)
                .HasForeignKey(d => d.PaymentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKBooking_Wo366542");

            entity.HasOne(d => d.User).WithMany(p => p.BookingWorkspaces)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKBooking_Wo604705");

            entity.HasOne(d => d.Workspace).WithMany(p => p.BookingWorkspaces)
                .HasForeignKey(d => d.WorkspaceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKBooking_Wo762246");
        });

        modelBuilder.Entity<CustomerWallet>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Customer__3214EC277A9BECA7");

            entity.ToTable("Customer_Wallet");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.WalletId).HasColumnName("WalletID");

            entity.HasOne(d => d.User).WithMany(p => p.CustomerWallets)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKCustomer_W978919");

            entity.HasOne(d => d.Wallet).WithMany(p => p.CustomerWallets)
                .HasForeignKey(d => d.WalletId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKCustomer_W786976");
        });

        modelBuilder.Entity<Facility>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__facility__3214EC27B29910F6");

            entity.ToTable("facility");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasColumnName("name");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
        });

        modelBuilder.Entity<FacilityWorkspace>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.FacilityId, e.WorkspaceId }).HasName("PK__facility__D879E35AD07DE03F");

            entity.ToTable("facility_Workspace");

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.FacilityId).HasColumnName("facilityID");
            entity.Property(e => e.WorkspaceId).HasColumnName("WorkspaceID");

            entity.HasOne(d => d.Facility).WithMany(p => p.FacilityWorkspaces)
                .HasForeignKey(d => d.FacilityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKfacility_W828201");

            entity.HasOne(d => d.Workspace).WithMany(p => p.FacilityWorkspaces)
                .HasForeignKey(d => d.WorkspaceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKfacility_W348891");
        });

        modelBuilder.Entity<Feedback>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Feedback__3214EC274DAC2D71");

            entity.ToTable("Feedback");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.Feedbacks)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKFeedback374627");
        });

        modelBuilder.Entity<Image>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Image__3214EC27429AC471");

            entity.ToTable("Image");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.ImgUrl)
                .HasMaxLength(255)
                .HasColumnName("img_url");
            entity.Property(e => e.Title)
                .HasMaxLength(50)
                .HasColumnName("title");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("updated_at");
        });

        modelBuilder.Entity<ImageFeedback>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Image_Fe__3214EC276C9521F7");

            entity.ToTable("Image_Feedback");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.FeedbackId).HasColumnName("FeedbackID");
            entity.Property(e => e.ImageId).HasColumnName("ImageID");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");

            entity.HasOne(d => d.Feedback).WithMany(p => p.ImageFeedbacks)
                .HasForeignKey(d => d.FeedbackId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKImage_Feed513527");

            entity.HasOne(d => d.Image).WithMany(p => p.ImageFeedbacks)
                .HasForeignKey(d => d.ImageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKImage_Feed509918");
        });

        modelBuilder.Entity<Notification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Notifica__3214EC27C02D2C88");

            entity.ToTable("Notification");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
        });

        modelBuilder.Entity<Owner>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Owner__3214EC27C8B8AE56");

            entity.ToTable("Owner");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Address)
                .HasColumnType("text")
                .HasColumnName("address");
            entity.Property(e => e.BusinessName)
                .HasMaxLength(50)
                .HasColumnName("business_name");
            entity.Property(e => e.Contract)
                .HasMaxLength(255)
                .HasColumnName("contract");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("email");
            entity.Property(e => e.License)
                .HasMaxLength(255)
                .HasColumnName("license");
            entity.Property(e => e.OwnerIdentityCard)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("owner_identity_card");
            entity.Property(e => e.OwnerName)
                .HasMaxLength(50)
                .HasColumnName("owner_name");
            entity.Property(e => e.Phone)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("phone");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
            entity.Property(e => e.TaxCode)
                .HasMaxLength(13)
                .IsFixedLength()
                .HasColumnName("tax_code");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("updated_at");
        });

        modelBuilder.Entity<OwnerTransactionHistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Owner_Tr__3214EC277A6A8CF0");

            entity.ToTable("Owner_Transaction_History");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.OwnerWalletId).HasColumnName("Owner_WalletID");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
            entity.Property(e => e.TransactionHistoryId).HasColumnName("Transaction_HistoryID");

            entity.HasOne(d => d.OwnerWallet).WithMany(p => p.OwnerTransactionHistories)
                .HasForeignKey(d => d.OwnerWalletId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKOwner_Tran177184");

            entity.HasOne(d => d.TransactionHistory).WithMany(p => p.OwnerTransactionHistories)
                .HasForeignKey(d => d.TransactionHistoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKOwner_Tran330923");
        });

        modelBuilder.Entity<OwnerWallet>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Owner_Wa__3214EC27EDC71A8E");

            entity.ToTable("Owner_Wallet");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.OwnerId).HasColumnName("OwnerID");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
            entity.Property(e => e.WalletId).HasColumnName("WalletID");

            entity.HasOne(d => d.Owner).WithMany(p => p.OwnerWallets)
                .HasForeignKey(d => d.OwnerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKOwner_Wall571813");

            entity.HasOne(d => d.Wallet).WithMany(p => p.OwnerWallets)
                .HasForeignKey(d => d.WalletId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKOwner_Wall535444");
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Payment__3214EC27304BC58B");

            entity.ToTable("Payment");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.PaymentMethod)
                .HasMaxLength(50)
                .HasColumnName("payment_method");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
        });

        modelBuilder.Entity<Policy>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Policy__3214EC27191AEB1A");

            entity.ToTable("Policy");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasColumnName("name");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
        });

        modelBuilder.Entity<Price>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Price__3214EC2741EDE42C");

            entity.ToTable("Price");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .HasColumnName("category");
            entity.Property(e => e.Price1)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("price");
        });

        modelBuilder.Entity<Rating>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Rating__3214EC270F2D391B");

            entity.ToTable("Rating");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Comment)
                .HasColumnType("text")
                .HasColumnName("comment");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.Rate).HasColumnName("rate");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("updated_at");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.Ratings)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKRating217340");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Role__3214EC2707A90752");

            entity.ToTable("Role");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.RoleName)
                .HasMaxLength(50)
                .HasColumnName("role_name");
        });

        modelBuilder.Entity<TransactionHistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Transact__3214EC2772D4FBC1");

            entity.ToTable("Transaction_History");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Amount)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("amount");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__User__3214EC2787FE5D3E");

            entity.ToTable("User");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Avatar)
                .HasMaxLength(255)
                .HasColumnName("avatar");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.DateOfBirth)
                .HasColumnType("datetime")
                .HasColumnName("dateOfBirth");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("email");
            entity.Property(e => e.Location)
                .HasColumnType("text")
                .HasColumnName("location");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasColumnName("name");
            entity.Property(e => e.Password)
                .HasMaxLength(50)
                .HasColumnName("password");
            entity.Property(e => e.Phone)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("phone");
            entity.Property(e => e.RoleId).HasColumnName("RoleID");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.Role).WithMany(p => p.Users)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKUser349791");
        });

        modelBuilder.Entity<UserTransactionHistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__User_Tra__3214EC27AD375C95");

            entity.ToTable("User_Transaction_History");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CustomerWalletId).HasColumnName("Customer_WalletID");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
            entity.Property(e => e.TransactionHistoryId).HasColumnName("Transaction_HistoryID");

            entity.HasOne(d => d.CustomerWallet).WithMany(p => p.UserTransactionHistories)
                .HasForeignKey(d => d.CustomerWalletId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKUser_Trans9893");

            entity.HasOne(d => d.TransactionHistory).WithMany(p => p.UserTransactionHistories)
                .HasForeignKey(d => d.TransactionHistoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKUser_Trans431856");
        });

        modelBuilder.Entity<Wallet>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Wallet__3214EC27C18985DA");

            entity.ToTable("Wallet");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Balance)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("balance");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
        });

        modelBuilder.Entity<Workspace>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Workspac__3214EC27A05B3589");

            entity.ToTable("Workspace");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Capacity).HasColumnName("capacity");
            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .HasColumnName("category");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasColumnName("name");
            entity.Property(e => e.OwnerId).HasColumnName("OwnerID");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.Owner).WithMany(p => p.Workspaces)
                .HasForeignKey(d => d.OwnerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKWorkspace597278");
        });

        modelBuilder.Entity<WorkspaceImage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Workspac__3214EC27E2468D21");

            entity.ToTable("Workspace_Image");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.ImageId).HasColumnName("ImageID");
            entity.Property(e => e.Status)
                .HasColumnType("datetime")
                .HasColumnName("status");
            entity.Property(e => e.WorkspaceId).HasColumnName("WorkspaceID");

            entity.HasOne(d => d.Image).WithMany(p => p.WorkspaceImages)
                .HasForeignKey(d => d.ImageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKWorkspace_260933");

            entity.HasOne(d => d.Workspace).WithMany(p => p.WorkspaceImages)
                .HasForeignKey(d => d.WorkspaceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKWorkspace_795085");
        });

        modelBuilder.Entity<WorkspacePolicy>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.WorkspaceId, e.PolicyId }).HasName("PK__Workspac__7BBE8945901CF2C8");

            entity.ToTable("Workspace_Policy");

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.WorkspaceId).HasColumnName("WorkspaceID");
            entity.Property(e => e.PolicyId).HasColumnName("PolicyID");

            entity.HasOne(d => d.Policy).WithMany(p => p.WorkspacePolicies)
                .HasForeignKey(d => d.PolicyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKWorkspace_55574");

            entity.HasOne(d => d.Workspace).WithMany(p => p.WorkspacePolicies)
                .HasForeignKey(d => d.WorkspaceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKWorkspace_370091");
        });

        modelBuilder.Entity<WorkspacePrice>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Workspac__3214EC2787449E81");

            entity.ToTable("Workspace_Price");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.PriceId).HasColumnName("PriceID");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
            entity.Property(e => e.WorkspaceId).HasColumnName("WorkspaceID");

            entity.HasOne(d => d.Price).WithMany(p => p.WorkspacePrices)
                .HasForeignKey(d => d.PriceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKWorkspace_493014");

            entity.HasOne(d => d.Workspace).WithMany(p => p.WorkspacePrices)
                .HasForeignKey(d => d.WorkspaceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKWorkspace_173913");
        });

        modelBuilder.Entity<WorkspaceRating>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Workspac__3214EC2764E873B7");

            entity.ToTable("Workspace_Rating");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.RatingId).HasColumnName("RatingID");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
            entity.Property(e => e.WorkspaceId).HasColumnName("WorkspaceID");

            entity.HasOne(d => d.Rating).WithMany(p => p.WorkspaceRatings)
                .HasForeignKey(d => d.RatingId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKWorkspace_38200");

            entity.HasOne(d => d.Workspace).WithMany(p => p.WorkspaceRatings)
                .HasForeignKey(d => d.WorkspaceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKWorkspace_802387");
        });

        modelBuilder.Entity<WorkspaceRatingImage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Workspac__3214EC270F3B1A44");

            entity.ToTable("Workspace_Rating_Image");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.ImageId).HasColumnName("ImageID");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
            entity.Property(e => e.WorkspaceRatingId).HasColumnName("Workspace_RatingID");

            entity.HasOne(d => d.Image).WithMany(p => p.WorkspaceRatingImages)
                .HasForeignKey(d => d.ImageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKWorkspace_235900");

            entity.HasOne(d => d.WorkspaceRating).WithMany(p => p.WorkspaceRatingImages)
                .HasForeignKey(d => d.WorkspaceRatingId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKWorkspace_818274");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}